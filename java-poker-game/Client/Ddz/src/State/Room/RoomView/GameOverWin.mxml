<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" 
	width="320" 
	height="360" 
	xmlns:local="*" 
	title="" 
	creationComplete="creationComplete()" 
	showCloseButton="true" backgroundAlpha="0.6">
	
	
	<mx:Button id="btnOk" y="258" horizontalCenter="0"/>
	
	<mx:Panel y="0" width="295" height="240" layout="absolute" horizontalCenter="0">	
		<mx:Label id="lbl1" x="48" y="10" text="{lang_lbl1_text}" fontSize="14"/>
		<mx:Label x="42" y="53" id="lblLeft" fontSize="14"/>
		<mx:Label x="42" y="100" id="lblDown" fontSize="14"/>
		<mx:Label x="42" y="151" id="lblRight" fontSize="14"/>
		<mx:Image id="imgLeft" source="{this.iconWin}" x="155" y="53"/>
		<mx:Image id="imgDown" source="{this.iconLostOrWin}" x="155" y="100"/>
		<mx:Image id="imgRight" source="{this.iconLost}" x="155" y="151"/>
	</mx:Panel>
	
	<mx:Script>
		<![CDATA[
			import net.wdqipai.client.extfactory.ChairModelFactory;
			import net.wdqipai.client.extmodel.ItemModelByDdz;
			import net.wdqipai.core.factory.UserModelFactory;
			import net.wdqipai.core.model.EUserSex;
			import net.wdqipai.core.model.FChat;
			import net.wdqipai.core.model.IChairModel;
			import net.wdqipai.core.model.IHallRoomModel;
			import net.wdqipai.core.model.ILookChairModel;
			import net.wdqipai.core.model.IRoomModel;
			import net.wdqipai.core.model.IRuleModel;
			import net.wdqipai.core.model.IUserModel;
			import net.wdqipai.core.model.level2.IdleModel;
			import net.wdqipai.core.model.level2.VarModel;
			
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			private var closeTimer:Timer;
			//快些关闭窗口，但游戏结束要长一点，因此设为1500//
			//现改为2000，倒计时Timer为倒计时3次，
			private var closeTimerDealy:int = 1500;
			
			public function get lang_lbl1_text():String
			{
				return GameGlobals.qpc.data.configXML.langVariByDdz.GameOverWinMXML_lbl1_text;
			}
			
			public function get lang_btnOk_label():String
			{
				return GameGlobals.qpc.data.configXML.langVariByDdz.GameOverWinMXML_btnOk_label;
			}
			
			//
			[Bindable]
			public var iconWin:MovieClip = new mc_win_winOrLostIcon();
			
			[Bindable]
			public var iconLostOrWin:MovieClip = new mc_win_winOrLostIcon();
			
			[Bindable]
			public var iconLost:MovieClip = new mc_win_winOrLostIcon();
			
			/**
			 * 事件侦听
			 */ 
			public function creationComplete():void
			{	
				//规矩:无关闭按钮时，不可拖动
				//showCloseButton="false" 
				this.isPopUp = false;		
				
				
				//
				this.addEventListener(CloseEvent.CLOSE, __close);
				
							
			}
			
			/**
			 * 移掉窗口
			 */ 			
			private function __close(event:CloseEvent=null):void
			{
				if(null != closeTimer)
				{
					if(closeTimer.running)
					{
						closeTimer.stop();
					}
				}
				
				//
				PopUpManager.removePopUp(this);
				
				//示意图
				
				//游戏结束 弹窗 -> 主动退出房间 -> 到另一个Hall，
				//负分自动离开房间
				var g:String = GameGlobals.qpc.data.hero.G;
				
				//只要携带够，就能进入房间，而退出房间按底分来，
				var difen:int = (GameGlobals.qpc.data.hallRoomList[0] as IHallRoomModel).getDiFen();
				
				
				//负分无法发贴，现根据房间底分来改
				if(Number(g) >= difen)
				{	
					//
					if(GameGlobals.qpc.data.isTabAutoMatchMode &&
					   "GameOver" == GameGlobals.qpc.data.activeRoom.Status)
					{					
						GameGlobals.qpc.leaveRoomAndGoHallAutoMatch(GameGlobals.qpc.data.hero.activeRoomId);					
					}
					
				}
			}
			
			/**
			 * 外部调用
			 */ 
			public function Close(event:CloseEvent=null):void
			{
				__close(event);
			}
			
			/**
			 * popup后调用该方法
			 * 
			 * 该方法3秒后会自动关闭窗口
			 * 
			 */ 
			public function startCloseTimeCount():void
			{
				//
				//this.btnOk.label = "确定(3)";
				this.btnOk.label =  lang_btnOk_label + "(3)";
				this.btnOk.addEventListener(MouseEvent.CLICK,clickHandler);
				
				//
				closeTimer = new Timer(closeTimerDealy,3);
				
				closeTimer.addEventListener(TimerEvent.TIMER,timeHandler);
				closeTimer.addEventListener(TimerEvent.TIMER_COMPLETE,timeCompleteHandler);
				
				closeTimer.start();
				
				//游戏结束时调用
				GameGlobals.qpc.loadGoldPoint();
			
			}
			
			public function clickHandler(event:MouseEvent):void
			{
				if(null != closeTimer)
				{
					if(closeTimer.hasEventListener(TimerEvent.TIMER))
					{
						closeTimer.removeEventListener(TimerEvent.TIMER,timeHandler);
					}
					
					if(closeTimer.hasEventListener(TimerEvent.TIMER_COMPLETE))
					{
						closeTimer.removeEventListener(TimerEvent.TIMER_COMPLETE,timeCompleteHandler);
					}
					
					closeTimer.stop();
				
				}//end if
			
				__close();
			
			}
			
			public function timeHandler(event:TimerEvent):void
			{
				//this.btnOk.label = "确定(" + (3-closeTimer.currentCount).toString() + ")";
				this.btnOk.label = lang_btnOk_label + "(" + (3-closeTimer.currentCount).toString() + ")";
				
			}
			
			public function timeCompleteHandler(event:TimerEvent):void
			{
				__close();			
				
				
			}
			
			
			
		]]>
	</mx:Script>
	
	
	
</mx:TitleWindow>
